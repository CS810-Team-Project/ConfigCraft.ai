public class java.util.concurrent.ThreadPoolExecutor extends java.util.concurrent.AbstractExecutorService
{
    private final java.util.concurrent.atomic.AtomicInteger ctl;
    private static final int COUNT_BITS;
    private static final int CAPACITY;
    private static final int RUNNING;
    private static final int SHUTDOWN;
    private static final int STOP;
    private static final int TIDYING;
    private static final int TERMINATED;
    private final java.util.concurrent.BlockingQueue workQueue;
    private final java.util.concurrent.locks.ReentrantLock mainLock;
    private final java.util.HashSet workers;
    private final java.util.concurrent.locks.Condition termination;
    private int largestPoolSize;
    private long completedTaskCount;
    private volatile java.util.concurrent.ThreadFactory threadFactory;
    private volatile java.util.concurrent.RejectedExecutionHandler handler;
    private volatile long keepAliveTime;
    private volatile boolean allowCoreThreadTimeOut;
    private volatile int corePoolSize;
    private volatile int maximumPoolSize;
    private static final java.util.concurrent.RejectedExecutionHandler defaultHandler;
    private static final java.lang.RuntimePermission shutdownPerm;
    private final java.security.AccessControlContext acc;
    private static final boolean ONLY_ONE;

    private static int runStateOf(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & -536870912;

        return $i1;
    }

    private static int workerCountOf(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 536870911;

        return $i1;
    }

    private static int ctlOf(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 | i1;

        return $i2;
    }

    private static boolean runStateLessThan(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean runStateAtLeast(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isRunning(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean compareAndIncrementWorkerCount(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i1 = i0 + 1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i1);

        return $z0;
    }

    private boolean compareAndDecrementWorkerCount(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i1 = i0 - 1;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, $i1);

        return $z0;
    }

    private void decrementWorkerCount()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

     label1:
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndDecrementWorkerCount(int)>($i0);

        if $z0 == 0 goto label1;

        return;
    }

    private void advanceRunState(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i3, i0);

        if $z0 != 0 goto label3;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i3);

        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(i0, $i1);

        $z1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>($i3, $i2);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        return;
    }

    final void tryTerminate()
    {
        java.lang.Throwable $r7, $r8;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1, $r3, $r4, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.BlockingQueue $r6;
        java.util.concurrent.locks.Condition $r5, $r10;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

     label01:
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>($i3);

        if $z0 != 0 goto label02;

        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i3, 1073741824);

        if $z1 != 0 goto label02;

        $i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>($i3);

        if $i0 != 0 goto label03;

        $r6 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z3 = interfaceinvoke $r6.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z3 != 0 goto label03;

     label02:
        return;

     label03:
        $i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i3);

        if $i1 == 0 goto label04;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers(boolean)>(1);

        return;

     label04:
        r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label05:
        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1073741824, 0);

        $z2 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>($i3, $i2);

        if $z2 == 0 goto label10;

     label06:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void terminated()>();

     label07:
        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i4 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1610612736, 0);

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i4);

        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signalAll()>();

        goto label09;

     label08:
        $r8 := @caughtexception;

        $r9 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i5 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(1610612736, 0);

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i5);

        $r10 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;

        interfaceinvoke $r10.<java.util.concurrent.locks.Condition: void signalAll()>();

        throw $r8;

     label09:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label10:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label13;

     label11:
        $r7 := @caughtexception;

     label12:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r7;

     label13:
        goto label01;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label09 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void checkShutdownAccess()
    {
        java.lang.Throwable $r9;
        java.util.concurrent.locks.ReentrantLock r3;
        java.util.Iterator r5;
        java.util.concurrent.ThreadPoolExecutor r2;
        java.util.concurrent.ThreadPoolExecutor$Worker r7;
        java.lang.SecurityManager r0;
        java.util.HashSet $r4;
        java.lang.Thread $r8;
        java.lang.RuntimePermission $r1;
        java.lang.Object $r6;
        boolean $z0;

        r2 := @this: java.util.concurrent.ThreadPoolExecutor;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label6;

        $r1 = <java.util.concurrent.ThreadPoolExecutor: java.lang.RuntimePermission shutdownPerm>;

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

        r3 = r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r2.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        r5 = virtualinvoke $r4.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r6;

        $r8 = r7.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;

        virtualinvoke r0.<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>($r8);

        goto label2;

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label6;

     label4:
        $r9 := @caughtexception;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r9;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void interruptWorkers()
    {
        java.lang.Throwable $r6;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r3;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r5;
        java.util.HashSet $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        r3 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r4;

        virtualinvoke r5.<java.util.concurrent.ThreadPoolExecutor$Worker: void interruptIfStarted()>();

        goto label2;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label6;

     label4:
        $r6 := @caughtexception;

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void interruptIdleWorkers(boolean)
    {
        java.lang.Throwable $r7, $r8;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r3;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r5;
        java.util.HashSet $r2;
        java.lang.Thread r6;
        java.lang.Object $r4;
        java.lang.SecurityException $r9;
        boolean $z0, $z1, z2, $z3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        z2 := @parameter0: boolean;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        r3 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r4;

        r6 = r5.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;

        $z1 = virtualinvoke r6.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 != 0 goto label09;

        $z3 = virtualinvoke r5.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean tryLock()>();

        if $z3 == 0 goto label09;

     label03:
        virtualinvoke r6.<java.lang.Thread: void interrupt()>();

     label04:
        virtualinvoke r5.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        goto label09;

     label05:
        $r9 := @caughtexception;

     label06:
        virtualinvoke r5.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        virtualinvoke r5.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        throw $r8;

     label09:
        if z2 == 0 goto label10;

        goto label11;

     label10:
        goto label02;

     label11:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label14;

     label12:
        $r7 := @caughtexception;

     label13:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r7;

     label14:
        return;

        catch java.lang.SecurityException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void interruptIdleWorkers()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers(boolean)>(0);

        return;
    }

    final void reject(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;
        java.util.concurrent.RejectedExecutionHandler $r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler>;

        interfaceinvoke $r2.<java.util.concurrent.RejectedExecutionHandler: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>(r1, r0);

        return;
    }

    void onShutdown()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        return;
    }

    final boolean isRunningOrShutdown(boolean)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, i1;
        boolean z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>($i0);

        if i1 == -536870912 goto label1;

        if i1 != 0 goto label2;

        if z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private java.util.List drainQueue()
    {
        java.lang.Object[] $r4;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.BlockingQueue r1;
        java.lang.Runnable r6;
        java.util.ArrayList $r2;
        java.lang.Runnable[] $r3, r5;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r1.<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>($r2);

        $z0 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r3 = newarray (java.lang.Runnable)[0];

        $r4 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        r5 = (java.lang.Runnable[]) $r4;

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r6 = r5[i1];

        $z1 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r2;
    }

    private boolean addWorker(java.lang.Runnable, boolean)
    {
        java.lang.Runnable r4;
        java.util.concurrent.atomic.AtomicInteger $r1, $r2, $r7;
        java.lang.Thread r5;
        boolean z0, $z1, $z2, $z3, z4, z5, z6, z7;
        java.util.concurrent.ThreadPoolExecutor$Worker $r3, r14;
        java.util.concurrent.BlockingQueue $r11;
        java.lang.Throwable $r12, $r13;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.HashSet $r8, $r9;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, i7, $i8, $i9;
        java.lang.IllegalThreadStateException $r10;
        java.util.concurrent.locks.ReentrantLock r6;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r4 := @parameter0: java.lang.Runnable;

        z0 := @parameter1: boolean;

     label01:
        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i7 = $i1;

        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>($i1);

        if $i2 < 0 goto label03;

        if $i2 != 0 goto label02;

        if r4 != null goto label02;

        $r11 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z3 = interfaceinvoke $r11.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z3 == 0 goto label03;

     label02:
        return 0;

     label03:
        $i8 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i7);

        if $i8 >= 536870911 goto label06;

        if z0 == 0 goto label04;

        $i9 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        goto label05;

     label04:
        $i9 = r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize>;

     label05:
        if $i8 < $i9 goto label07;

     label06:
        return 0;

     label07:
        $z1 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndIncrementWorkerCount(int)>(i7);

        if $z1 == 0 goto label08;

        goto label10;

     label08:
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        i7 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>(i7);

        if $i0 == $i2 goto label09;

        goto label01;

     label09:
        goto label03;

     label10:
        z4 = 0;

        z7 = 0;

        z6 = 0;

        z5 = 0;

        r14 = null;

     label11:
        $r3 = new java.util.concurrent.ThreadPoolExecutor$Worker;

        specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor$Worker: void <init>(java.util.concurrent.ThreadPoolExecutor,java.lang.Runnable)>(r0, r4);

        r14 = $r3;

        r5 = $r3.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Thread thread>;

        if r5 == null goto label20;

        r6 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r6.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label12:
        $r7 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i3 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i4 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>($i3);

        if i4 < 0 goto label13;

        if i4 != 0 goto label16;

        if r4 != null goto label16;

     label13:
        $z2 = virtualinvoke r5.<java.lang.Thread: boolean isAlive()>();

        if $z2 == 0 goto label14;

        $r10 = new java.lang.IllegalThreadStateException;

        specialinvoke $r10.<java.lang.IllegalThreadStateException: void <init>()>();

        throw $r10;

     label14:
        $r8 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        virtualinvoke $r8.<java.util.HashSet: boolean add(java.lang.Object)>($r3);

        $r9 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        i5 = virtualinvoke $r9.<java.util.HashSet: int size()>();

        $i6 = r0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize>;

        if i5 <= $i6 goto label15;

        r0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize> = i5;

     label15:
        z5 = 1;

     label16:
        virtualinvoke r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label19;

     label17:
        $r13 := @caughtexception;

     label18:
        virtualinvoke r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r13;

     label19:
        if z5 == 0 goto label20;

        virtualinvoke r5.<java.lang.Thread: void start()>();

        z4 = 1;

        z7 = 1;

        z6 = 1;

     label20:
        if z7 != 0 goto label23;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)>($r3);

        goto label23;

     label21:
        $r12 := @caughtexception;

     label22:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)>(r14);

        throw $r12;

     label23:
        return z6;

        catch java.lang.Throwable from label12 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label11 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    private void addWorkerFailed(java.util.concurrent.ThreadPoolExecutor$Worker)
    {
        java.util.HashSet $r3;
        java.lang.Throwable $r4;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r2 := @parameter0: java.util.concurrent.ThreadPoolExecutor$Worker;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        if r2 == null goto label2;

        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        virtualinvoke $r3.<java.util.HashSet: boolean remove(java.lang.Object)>(r2);

     label2:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void decrementWorkerCount()>();

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label5;

     label4:
        $r4 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private void processWorkerExit(java.util.concurrent.ThreadPoolExecutor$Worker, boolean)
    {
        java.lang.Throwable $r6;
        java.util.concurrent.ThreadPoolExecutor r0;
        long $l0, $l1, $l2;
        java.util.HashSet $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int i3, $i4, i5, $i6;
        boolean z0, $z1, $z2, $z3;
        java.util.concurrent.locks.ReentrantLock $r5;
        java.util.concurrent.ThreadPoolExecutor$Worker r1;
        java.util.concurrent.BlockingQueue $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.ThreadPoolExecutor$Worker;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label01;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void decrementWorkerCount()>();

     label01:
        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label02:
        $l1 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;

        $l0 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;

        $l2 = $l1 + $l0;

        r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount> = $l2;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        virtualinvoke $r2.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label03:
        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label06;

     label04:
        $r6 := @caughtexception;

     label05:
        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r6;

     label06:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        i3 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateLessThan(int,int)>(i3, 536870912);

        if $z1 == 0 goto label11;

        if z0 != 0 goto label10;

        $z2 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;

        if $z2 == 0 goto label07;

        $i4 = 0;

        goto label08;

     label07:
        $i4 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

     label08:
        i5 = $i4;

        if $i4 != 0 goto label09;

        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z3 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z3 != 0 goto label09;

        i5 = 1;

     label09:
        $i6 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i3);

        if $i6 < i5 goto label10;

        return;

     label10:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 0);

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    private java.lang.Runnable getTask()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long $l1;
        java.lang.Runnable $r10;
        java.util.concurrent.atomic.AtomicInteger $r9;
        int $i0, $i2, $i3, $i4, $i5;
        boolean $z0, z1, $z2, $z3, $z4, z5, $z7, $z8;
        java.util.concurrent.BlockingQueue $r1, $r2, $r5, $r7;
        java.util.concurrent.TimeUnit $r4;
        java.lang.InterruptedException $r8;
        java.lang.Object $r3, $r6;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        z5 = 0;

     label01:
        $r9 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i4 = virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i5 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int runStateOf(int)>($i4);

        if $i5 < 0 goto label03;

        if $i5 >= 536870912 goto label02;

        $r7 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z4 = interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z4 == 0 goto label03;

     label02:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void decrementWorkerCount()>();

        return null;

     label03:
        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i4);

        $z0 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;

        if $z0 != 0 goto label04;

        $i2 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        if $i3 <= $i2 goto label05;

     label04:
        $z8 = 1;

        $z7 = 1;

        goto label06;

     label05:
        $z8 = 0;

        $z7 = 0;

     label06:
        z1 = $z8;

        $i0 = r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize>;

        if $i3 > $i0 goto label07;

        if $z7 == 0 goto label09;

        if z5 == 0 goto label09;

     label07:
        if $i3 > 1 goto label08;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z3 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z3 == 0 goto label09;

     label08:
        $z2 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean compareAndDecrementWorkerCount(int)>($i4);

        if $z2 == 0 goto label01;

        return null;

     label09:
        if z1 == 0 goto label10;

        $r5 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $l1 = r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $r6 = interfaceinvoke $r5.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>($l1, $r4);

        $r10 = (java.lang.Runnable) $r6;

        goto label11;

     label10:
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        $r10 = (java.lang.Runnable) $r3;

     label11:
        if $r10 == null goto label13;

     label12:
        return $r10;

     label13:
        z5 = 1;

     label14:
        goto label16;

     label15:
        $r8 := @caughtexception;

        z5 = 0;

     label16:
        goto label01;

        catch java.lang.InterruptedException from label09 to label12 with label15;
        catch java.lang.InterruptedException from label13 to label14 with label15;
    }

    final void runWorker(java.util.concurrent.ThreadPoolExecutor$Worker)
    {
        java.lang.Throwable $r6, $r7, $r8, $r9, r14;
        java.util.concurrent.ThreadPoolExecutor r2;
        java.lang.Error $r10, $r11;
        long $l1, $l2, $l4, $l5;
        java.lang.Runnable $r5, r13;
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        java.lang.Thread r0;
        int $i0, $i3;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.ThreadPoolExecutor$Worker r1;
        java.lang.RuntimeException $r12;

        r2 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.util.concurrent.ThreadPoolExecutor$Worker;

        r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r13 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Runnable firstTask>;

        r1.<java.util.concurrent.ThreadPoolExecutor$Worker: java.lang.Runnable firstTask> = null;

        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

     label01:
        if r13 != null goto label02;

        $r5 = specialinvoke r2.<java.util.concurrent.ThreadPoolExecutor: java.lang.Runnable getTask()>();

        r13 = $r5;

        if $r5 == null goto label16;

     label02:
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void lock()>();

        $r3 = r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i0, 536870912);

        if $z0 != 0 goto label03;

        $z2 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z2 == 0 goto label04;

        $r4 = r2.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i3 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i3, 536870912);

        if $z3 == 0 goto label04;

     label03:
        $z1 = virtualinvoke r0.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 != 0 goto label04;

        virtualinvoke r0.<java.lang.Thread: void interrupt()>();

     label04:
        virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>(r0, r13);

        r14 = null;

     label05:
        interfaceinvoke r13.<java.lang.Runnable: void run()>();

     label06:
        virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r13, null);

        goto label12;

     label07:
        $r12 := @caughtexception;

        r14 = $r12;

        throw $r12;

     label08:
        $r11 := @caughtexception;

        r14 = $r11;

        throw $r11;

     label09:
        $r9 := @caughtexception;

        r14 = $r9;

        $r10 = new java.lang.Error;

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label10:
        $r8 := @caughtexception;

     label11:
        virtualinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>(r13, r14);

        throw $r8;

     label12:
        r13 = null;

        $l1 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;

        $l2 = $l1 + 1L;

        r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks> = $l2;

        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        goto label15;

     label13:
        $r7 := @caughtexception;

     label14:
        $l4 = r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;

        $l5 = $l4 + 1L;

        r1.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks> = $l5;

        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor$Worker: void unlock()>();

        throw $r7;

     label15:
        goto label01;

     label16:
        specialinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void processWorkerExit(java.util.concurrent.ThreadPoolExecutor$Worker,boolean)>(r1, 0);

        goto label19;

     label17:
        $r6 := @caughtexception;

     label18:
        specialinvoke r2.<java.util.concurrent.ThreadPoolExecutor: void processWorkerExit(java.util.concurrent.ThreadPoolExecutor$Worker,boolean)>(r1, 1);

        throw $r6;

     label19:
        return;

        catch java.lang.RuntimeException from label05 to label06 with label07;
        catch java.lang.Error from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label11 with label10;
        catch java.lang.Throwable from label04 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l2;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.RejectedExecutionHandler $r3;
        int i0, i1;
        java.util.concurrent.ThreadFactory $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        $r3 = <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler>;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, i1, l2, r1, r2, $r4, $r3);

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l2;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.RejectedExecutionHandler $r4;
        int i0, i1;
        java.util.concurrent.ThreadFactory r3;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        r3 := @parameter5: java.util.concurrent.ThreadFactory;

        $r4 = <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler>;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, i1, l2, r1, r2, r3, $r4);

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        long l2;
        java.util.concurrent.BlockingQueue r2;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.RejectedExecutionHandler r3;
        int i0, i1;
        java.util.concurrent.ThreadFactory $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        r2 := @parameter4: java.util.concurrent.BlockingQueue;

        r3 := @parameter5: java.util.concurrent.RejectedExecutionHandler;

        $r4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(i0, i1, l2, r1, r2, $r4, r3);

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
    {
        java.security.AccessControlContext $r13;
        java.util.concurrent.ThreadPoolExecutor r0;
        long l3, $l5;
        java.lang.NullPointerException $r18;
        java.util.HashSet $r16;
        byte $b4;
        java.util.concurrent.RejectedExecutionHandler r8;
        java.util.concurrent.atomic.AtomicInteger $r14;
        int $i0, i1, i2, $i6;
        java.util.concurrent.ThreadFactory r7;
        java.util.concurrent.locks.ReentrantLock $r4, $r15;
        java.util.concurrent.BlockingQueue r6;
        java.lang.IllegalArgumentException $r17;
        java.lang.SecurityManager $r9;
        java.util.concurrent.TimeUnit r10;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        l3 := @parameter2: long;

        r10 := @parameter3: java.util.concurrent.TimeUnit;

        r6 := @parameter4: java.util.concurrent.BlockingQueue;

        r7 := @parameter5: java.util.concurrent.ThreadFactory;

        r8 := @parameter6: java.util.concurrent.RejectedExecutionHandler;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        $r14 = new java.util.concurrent.atomic.AtomicInteger;

        $i0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int ctlOf(int,int)>(-536870912, 0);

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>($i0);

        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl> = $r14;

        $r15 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r15.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock> = $r15;

        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>()>();

        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers> = $r16;

        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination> = $r5;

        if i1 < 0 goto label1;

        if i2 <= 0 goto label1;

        if i2 < i1 goto label1;

        $b4 = l3 cmp 0L;

        $i6 = (int) $b4;

        if $i6 >= 0 goto label2;

     label1:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r17;

     label2:
        if r6 == null goto label3;

        if r7 == null goto label3;

        if r8 != null goto label4;

     label3:
        $r18 = new java.lang.NullPointerException;

        specialinvoke $r18.<java.lang.NullPointerException: void <init>()>();

        throw $r18;

     label4:
        $r9 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r9 != null goto label5;

        $r13 = null;

        goto label6;

     label5:
        $r13 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

     label6:
        r0.<java.util.concurrent.ThreadPoolExecutor: java.security.AccessControlContext acc> = $r13;

        r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize> = i1;

        r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize> = i2;

        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue> = r6;

        $l5 = virtualinvoke r10.<java.util.concurrent.TimeUnit: long toNanos(long)>(l3);

        r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime> = $l5;

        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory> = r7;

        r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler> = r8;

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r1;
        java.lang.Runnable r0;
        java.lang.NullPointerException $r6;
        java.util.concurrent.atomic.AtomicInteger $r2, $r4, $r5;
        int $i0, $i1, i2, $i3, i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.BlockingQueue $r3;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        r0 := @parameter0: java.lang.Runnable;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        $r2 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        i4 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i4);

        $i0 = r1.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        if $i1 >= $i0 goto label3;

        $z5 = specialinvoke r1.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(r0, 1);

        if $z5 == 0 goto label2;

        return;

     label2:
        $r5 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        i4 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label3:
        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(i4);

        if $z0 == 0 goto label6;

        $r3 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z2 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r0);

        if $z2 == 0 goto label6;

        $r4 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        i2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(i2);

        if $z3 != 0 goto label4;

        $z4 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>(r0);

        if $z4 == 0 goto label4;

        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void reject(java.lang.Runnable)>(r0);

        goto label5;

     label4:
        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>(i2);

        if $i3 != 0 goto label5;

        specialinvoke r1.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 0);

     label5:
        goto label7;

     label6:
        $z1 = specialinvoke r1.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(r0, 0);

        if $z1 != 0 goto label7;

        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void reject(java.lang.Runnable)>(r0);

     label7:
        return;
    }

    public void shutdown()
    {
        java.lang.Throwable $r2;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void checkShutdownAccess()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void advanceRunState(int)>(0);

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void onShutdown()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r2;

     label4:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List shutdownNow()
    {
        java.lang.Throwable $r3;
        java.util.List r2;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void checkShutdownAccess()>();

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void advanceRunState(int)>(536870912);

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptWorkers()>();

        r2 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: java.util.List drainQueue()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r3;

     label4:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isShutdown()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>($i0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isTerminating()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean isRunning(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateLessThan(int,int)>(i0, 1610612736);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isTerminated()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i0, 1610612736);

        return $z0;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.lang.Throwable $r5;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.ThreadPoolExecutor r1;
        long l0, l3;
        java.util.concurrent.TimeUnit r0;
        java.util.concurrent.locks.Condition $r4;
        byte $b2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i1, $i4;
        boolean $z0;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        l3 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i1, 1610612736);

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 1;

     label3:
        $b2 = l3 cmp 0L;

        $i4 = (int) $b2;

        if $i4 > 0 goto label5;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return 0;

     label5:
        $r4 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.Condition termination>;

        l3 = interfaceinvoke $r4.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l3);

        goto label1;

     label6:
        $r5 := @caughtexception;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    protected void finalize()
    {
        java.security.AccessControlContext $r2, $r4;
        java.util.concurrent.ThreadPoolExecutor r1;
        java.security.PrivilegedAction r3;
        java.lang.SecurityManager r0;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label1;

        $r2 = r1.<java.util.concurrent.ThreadPoolExecutor: java.security.AccessControlContext acc>;

        if $r2 != null goto label2;

     label1:
        virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        goto label3;

     label2:
        r3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor$lambda_finalize_0__1: java.security.PrivilegedAction bootstrap$(java.util.concurrent.ThreadPoolExecutor)>(r1);

        $r4 = r1.<java.util.concurrent.ThreadPoolExecutor: java.security.AccessControlContext acc>;

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)>(r3, $r4);

     label3:
        return;
    }

    public void setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.ThreadPoolExecutor r1;
        java.lang.NullPointerException $r2;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        r0 := @parameter0: java.util.concurrent.ThreadFactory;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory> = r0;

        return;
    }

    public java.util.concurrent.ThreadFactory getThreadFactory()
    {
        java.util.concurrent.ThreadFactory $r1;
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory threadFactory>;

        return $r1;
    }

    public void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)
    {
        java.util.concurrent.RejectedExecutionHandler r0;
        java.util.concurrent.ThreadPoolExecutor r1;
        java.lang.NullPointerException $r2;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        r0 := @parameter0: java.util.concurrent.RejectedExecutionHandler;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler> = r0;

        return;
    }

    public java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.RejectedExecutionHandler $r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler handler>;

        return $r1;
    }

    public void setCorePoolSize(int)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, i7, $i9;
        boolean $z0, $z1;
        java.util.concurrent.BlockingQueue $r2, $r3;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label1:
        $i1 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        i2 = i0 - $i1;

        r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize> = i0;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i4 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i3);

        if $i4 <= i0 goto label2;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

        goto label4;

     label2:
        if i2 <= 0 goto label4;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $i5 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: int size()>();

        i7 = staticinvoke <java.lang.Math: int min(int,int)>(i2, $i5);

     label3:
        $i6 = i7;

        $i9 = (int) -1;

        i7 = i7 + $i9;

        if $i6 <= 0 goto label4;

        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);

        if $z0 == 0 goto label4;

        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $z1 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        goto label4;

     label4:
        return;
    }

    public int getCorePoolSize()
    {
        int $i0;
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $i0 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        return $i0;
    }

    public boolean prestartCoreThread()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i0);

        $i1 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        if $i2 >= $i1 goto label1;

        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void ensurePrestart()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0, i1, $i2;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i0);

        $i2 = r0.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        if i1 >= $i2 goto label1;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);

        goto label2;

     label1:
        if i1 != 0 goto label2;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 0);

     label2:
        return;
    }

    public int prestartAllCoreThreads()
    {
        int i0;
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 = 0;

     label1:
        $z0 = specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: boolean addWorker(java.lang.Runnable,boolean)>(null, 1);

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    public boolean allowsCoreThreadTimeOut()
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $z0 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;

        return $z0;
    }

    public void allowCoreThreadTimeOut(boolean)
    {
        byte $b1;
        java.util.concurrent.ThreadPoolExecutor r0;
        int $i2;
        long $l0;
        java.lang.IllegalArgumentException $r2;
        boolean z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $l0 = r0.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Core threads must have nonzero keep alive times");

        throw $r2;

     label1:
        $z1 = r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut>;

        if z0 == $z1 goto label2;

        r0.<java.util.concurrent.ThreadPoolExecutor: boolean allowCoreThreadTimeOut> = z0;

        if z0 == 0 goto label2;

        specialinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

     label2:
        return;
    }

    public void setMaximumPoolSize(int)
    {
        java.util.concurrent.ThreadPoolExecutor r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r0;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $i1 = r1.<java.util.concurrent.ThreadPoolExecutor: int corePoolSize>;

        if i0 >= $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        r1.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize> = i0;

        $r2 = r1.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $i3 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: int workerCountOf(int)>($i2);

        if $i3 <= i0 goto label3;

        specialinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

     label3:
        return;
    }

    public int getMaximumPoolSize()
    {
        int $i0;
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $i0 = r0.<java.util.concurrent.ThreadPoolExecutor: int maximumPoolSize>;

        return $i0;
    }

    public void setKeepAliveTime(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ThreadPoolExecutor r1;
        long l0, $l3, $l5, $l6;
        java.lang.IllegalArgumentException $r4, $r5;
        java.util.concurrent.TimeUnit r0;
        byte $b1, $b2, $b4;
        int $i7, $i8;
        boolean $z0;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        $b1 = l0 cmp 0L;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        $z0 = virtualinvoke r1.<java.util.concurrent.ThreadPoolExecutor: boolean allowsCoreThreadTimeOut()>();

        if $z0 == 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Core threads must have nonzero keep alive times");

        throw $r5;

     label2:
        $l5 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $l3 = r1.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;

        $l6 = $l5 - $l3;

        r1.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime> = $l5;

        $b4 = $l6 cmp 0L;

        $i8 = (int) $b4;

        if $i8 >= 0 goto label3;

        specialinvoke r1.<java.util.concurrent.ThreadPoolExecutor: void interruptIdleWorkers()>();

     label3:
        return;
    }

    public long getKeepAliveTime(java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r0, $r2;
        java.util.concurrent.ThreadPoolExecutor r1;
        long $l0, $l1;

        r1 := @this: java.util.concurrent.ThreadPoolExecutor;

        r0 := @parameter0: java.util.concurrent.TimeUnit;

        $l0 = r1.<java.util.concurrent.ThreadPoolExecutor: long keepAliveTime>;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l1 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l0, $r2);

        return $l1;
    }

    public java.util.concurrent.BlockingQueue getQueue()
    {
        java.util.concurrent.BlockingQueue $r1;
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        $r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        return $r1;
    }

    public boolean remove(java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.BlockingQueue $r2;
        java.lang.Runnable r1;
        boolean z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        z0 = interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(r1);

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

        return z0;
    }

    public void purge()
    {
        java.lang.Object[] r9;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r8;
        java.util.concurrent.Future $r3, $r6;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator r7;
        java.util.concurrent.BlockingQueue r1;
        java.lang.Object $r2, r5;
        java.util.ConcurrentModificationException $r4;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

     label1:
        r7 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Runnable) $r2;

        $z1 = r8 instanceof java.util.concurrent.Future;

        if $z1 == 0 goto label3;

        $r3 = (java.util.concurrent.Future) r8;

        $z2 = interfaceinvoke $r3.<java.util.concurrent.Future: boolean isCancelled()>();

        if $z2 == 0 goto label3;

        interfaceinvoke r7.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        goto label8;

     label5:
        $r4 := @caughtexception;

        r9 = interfaceinvoke r1.<java.util.concurrent.BlockingQueue: java.lang.Object[] toArray()>();

        i0 = lengthof r9;

        i1 = 0;

     label6:
        if i1 >= i0 goto label8;

        r5 = r9[i1];

        $z3 = r5 instanceof java.util.concurrent.Future;

        if $z3 == 0 goto label7;

        $r6 = (java.util.concurrent.Future) r5;

        $z4 = interfaceinvoke $r6.<java.util.concurrent.Future: boolean isCancelled()>();

        if $z4 == 0 goto label7;

        interfaceinvoke r1.<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>(r5);

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void tryTerminate()>();

        return;

        catch java.util.ConcurrentModificationException from label1 to label4 with label5;
    }

    public int getPoolSize()
    {
        java.lang.Throwable $r4;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.HashSet $r3;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z0 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>($i0, 1073741824);

        if $z0 == 0 goto label2;

        $i1 = 0;

        goto label3;

     label2:
        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        $i1 = virtualinvoke $r3.<java.util.HashSet: int size()>();

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return $i1;

     label4:
        $r4 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public int getActiveCount()
    {
        java.lang.Throwable $r5;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r6;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r4;
        java.util.HashSet $r2;
        int i0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = 0;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        r6 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r3;

        $z1 = virtualinvoke r4.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>();

        if $z1 == 0 goto label3;

        i0 = i0 + 1;

     label3:
        goto label2;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getLargestPoolSize()
    {
        java.lang.Throwable $r2;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.ThreadPoolExecutor r0;
        int i0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.ThreadPoolExecutor: int largestPoolSize>;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long getTaskCount()
    {
        java.lang.Throwable $r6;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r7;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r5;
        java.util.concurrent.BlockingQueue $r3;
        long $l1, $l2, l3, l4;
        java.util.HashSet $r2;
        int $i0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        l3 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        r7 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r4;

        $l2 = r5.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;

        l3 = l3 + $l2;

        $z1 = virtualinvoke r5.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>();

        if $z1 == 0 goto label3;

        l3 = l3 + 1L;

     label3:
        goto label2;

     label4:
        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $i0 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: int size()>();

        $l1 = (long) $i0;

        l4 = l3 + $l1;

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return l4;

     label6:
        $r6 := @caughtexception;

     label7:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public long getCompletedTaskCount()
    {
        java.lang.Throwable $r5;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r6;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.util.concurrent.ThreadPoolExecutor$Worker r4;
        long $l0, l1;
        java.util.HashSet $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        l1 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        r6 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r3;

        $l0 = r4.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;

        l1 = l1 + $l0;

        goto label2;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return l1;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicInteger $r4;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.ThreadPoolExecutor$Worker r8;
        java.util.concurrent.BlockingQueue $r20;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r21, $r22, $r23, $r24;
        java.lang.Throwable $r6;
        java.util.concurrent.ThreadPoolExecutor r0;
        long $l1, l2;
        java.util.HashSet $r2, $r3;
        int i0, i3, i4, $i5;
        java.lang.String $r9, $r11, $r25;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.Iterator r7;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.locks.ReentrantLock mainLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        l2 = r0.<java.util.concurrent.ThreadPoolExecutor: long completedTaskCount>;

        i3 = 0;

        $r2 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        i0 = virtualinvoke $r2.<java.util.HashSet: int size()>();

        $r3 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.HashSet workers>;

        r7 = virtualinvoke $r3.<java.util.HashSet: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r5 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.concurrent.ThreadPoolExecutor$Worker) $r5;

        $l1 = r8.<java.util.concurrent.ThreadPoolExecutor$Worker: long completedTasks>;

        l2 = l2 + $l1;

        $z3 = virtualinvoke r8.<java.util.concurrent.ThreadPoolExecutor$Worker: boolean isLocked()>();

        if $z3 == 0 goto label03;

        i3 = i3 + 1;

     label03:
        goto label02;

     label04:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label07;

     label05:
        $r6 := @caughtexception;

     label06:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r6;

     label07:
        $r4 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.atomic.AtomicInteger ctl>;

        i4 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        $z1 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateLessThan(int,int)>(i4, 0);

        if $z1 == 0 goto label08;

        $r9 = "Running";

        goto label10;

     label08:
        $z2 = staticinvoke <java.util.concurrent.ThreadPoolExecutor: boolean runStateAtLeast(int,int)>(i4, 1610612736);

        if $z2 == 0 goto label09;

        $r9 = "Terminated";

        goto label10;

     label09:
        $r9 = "Shutting down";

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", pool size = ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", active threads = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", queued tasks = ");

        $r20 = r0.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue workQueue>;

        $i5 = interfaceinvoke $r20.<java.util.concurrent.BlockingQueue: int size()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", completed tasks = ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r25;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    protected void beforeExecute(java.lang.Thread, java.lang.Runnable)
    {
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r2;
        java.lang.Thread r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Runnable;

        return;
    }

    protected void afterExecute(java.lang.Runnable, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        java.util.concurrent.ThreadPoolExecutor r0;
        java.lang.Runnable r1;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Throwable;

        return;
    }

    protected void terminated()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        return;
    }

    public java.lang.Void lambda$finalize$0()
    {
        java.util.concurrent.ThreadPoolExecutor r0;

        r0 := @this: java.util.concurrent.ThreadPoolExecutor;

        virtualinvoke r0.<java.util.concurrent.ThreadPoolExecutor: void shutdown()>();

        return null;
    }

    static void <clinit>()
    {
        java.lang.RuntimePermission $r1;
        java.util.concurrent.ThreadPoolExecutor$AbortPolicy $r0;

        <java.util.concurrent.ThreadPoolExecutor: boolean ONLY_ONE> = 1;

        <java.util.concurrent.ThreadPoolExecutor: int TERMINATED> = 1610612736;

        <java.util.concurrent.ThreadPoolExecutor: int TIDYING> = 1073741824;

        <java.util.concurrent.ThreadPoolExecutor: int STOP> = 536870912;

        <java.util.concurrent.ThreadPoolExecutor: int SHUTDOWN> = 0;

        <java.util.concurrent.ThreadPoolExecutor: int RUNNING> = -536870912;

        <java.util.concurrent.ThreadPoolExecutor: int CAPACITY> = 536870911;

        <java.util.concurrent.ThreadPoolExecutor: int COUNT_BITS> = 29;

        $r0 = new java.util.concurrent.ThreadPoolExecutor$AbortPolicy;

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor$AbortPolicy: void <init>()>();

        <java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler defaultHandler> = $r0;

        $r1 = new java.lang.RuntimePermission;

        specialinvoke $r1.<java.lang.RuntimePermission: void <init>(java.lang.String)>("modifyThread");

        <java.util.concurrent.ThreadPoolExecutor: java.lang.RuntimePermission shutdownPerm> = $r1;

        return;
    }
}
